
######################################################
# Define the custom instruction functionality
######################################################

set cfu_store
"""
src_rs1 = (instruction >> 15) & 31
src_rs2 = (instruction >> 20) & 31
dst     = (instruction >> 7) & 31
in0 = cpu.GetRegisterUnsafe(src_rs1).RawValue
if (in0 == 10):
    state['max_width'] = int(cpu.GetRegisterUnsafe(src_rs2).RawValue)
if (in0 == 11):
    state['max_height'] = int(cpu.GetRegisterUnsafe(src_rs2).RawValue)
if (in0 == 12):
    state['acc'] = 0;    # hmm, why not a general write?
if (in0 == 13):
    state['input_offset'] = int(cpu.GetRegisterUnsafe(src_rs2).RawValue)
#cpu.DebugLog('store: no writeback')
# no writeback?  Is that correct?
"""


set cfu_read
"""
src_rs1 = (instruction >> 15) & 31
src_rs2 = (instruction >> 20) & 31
dst_reg = (instruction >> 7) & 31
in0 = int(cpu.GetRegisterUnsafe(src_rs1).RawValue)
if (in0 == 10):
    res = state['max_width']
if (in0 == 11):
    res = state['max_height']
if (in0 == 12):
    res = state['acc']
if (in0 == 13):
    res = state['input_offset']
#txt = "read: dst_reg:{dst_reg} res:{res}"
#cpu.DebugLog(txt.format(dst_reg=dst_reg, res=res))

if (res < 0):
    res += 0x100000000

cpu.SetRegisterUnsafe(dst_reg, res)
"""


set cfu_double_compare
"""
src_rs1 = (instruction >> 15) & 31
src_rs2 = (instruction >> 20) & 31
dst_reg = (instruction >> 7) & 31
x = int(cpu.GetRegisterUnsafe(src_rs1).RawValue)
y = int(cpu.GetRegisterUnsafe(src_rs2).RawValue)
xmax = int(state['max_width'])
ymax = int(state['max_height'])
res = (x >= 0) and (x < xmax) and (y >= 0) and (y < ymax)
#txt = "compare: dst_reg:{dst_reg} res:{res}"
#cpu.DebugLog(txt.format(dst_reg=dst_reg, res=res))
cpu.SetRegisterUnsafe(dst_reg, res)
"""



set cfu_macc
"""
src_rs1 = (instruction >> 15) & 31
src_rs2 = (instruction >> 20) & 31
dst_reg = (instruction >> 7) & 31
filter_val   = int(cpu.GetRegisterUnsafe(src_rs1).RawValue)
input_val    = int(cpu.GetRegisterUnsafe(src_rs2).RawValue)
acc_before   = state['acc']
input_offset = state['input_offset']

if (filter_val >= 0x80000000):
    filter_val -= 0x100000000;
if (input_val >= 0x80000000):
    input_val -= 0x100000000;

acc_after    = acc_before + filter_val * (input_val + input_offset)
state['acc'] = acc_after
res = 0
#txt = "macc: dst_reg:{dst_reg} res:{res}   acc:{oldacc} -> {newacc}   fv:{fv}  iv:{iv}  ioffs:{io}"
#cpu.DebugLog(txt.format(dst_reg=dst_reg, res=res, oldacc=acc_before, newacc=acc_after, fv=filter_val, iv=input_val, io=input_offset))
cpu.SetRegisterUnsafe(dst_reg, res)
"""


######################################################
# Set up the machine, load the ELF
######################################################

using sysbus

mach create
machine LoadPlatformDescription $ORIGIN/litex-vexriscv-tflite.repl
showAnalyzer uart

logLevel 0 sysbus.cpu

sysbus.cpu InstallCustomInstructionHandlerFromString "0000000yyyyyxxxxx000ddddd0001011" $cfu_double_compare
sysbus.cpu InstallCustomInstructionHandlerFromString "0000000yyyyyxxxxx001ddddd0001011" $cfu_store
sysbus.cpu InstallCustomInstructionHandlerFromString "0000000yyyyyxxxxx010ddddd0001011" $cfu_read
sysbus.cpu InstallCustomInstructionHandlerFromString "0000000yyyyyxxxxx011ddddd0001011" $cfu_macc
#                                                         function id--^^^

sysbus LoadELF $ORIGIN/tflm_harness.elf

# machine StartGdbServer 3333


######################################################
# Print out some info
######################################################

peripherals
echo
echo -n "RAM Size:    "
sysbus.ram Size

# Examine some memory locations
#echo -n "RAM 0x6b758: "
#sysbus.ram ReadDoubleWord 0x6b758

echo "This is useful for debugging: sysbus.cpu LogFunctionNames true"
